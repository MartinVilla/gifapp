{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","cats","type","value","onChange","console","log","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAc9C,OACI,sBAAMC,SAPW,SAACC,GAClBA,EAAEC,iBACFN,GAAe,SAAAO,GAAI,OAAKL,GAAL,mBAAmBK,OACtCJ,EAAc,KAId,SACI,uBACIK,KAAK,OACLC,MAAQP,EACRQ,SAhBc,SAACL,GACvBM,QAAQC,IAAIP,EAAEQ,OAAOJ,OACrBN,EAAcE,EAAEQ,OAAOJ,a,+BCRlBK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0FAC4EC,UAAUH,GADtF,sBAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAIzCN,QAAQC,IAAIW,GAbO,kBAcZA,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAsB,EAAnBJ,GAAoB,IAAjBC,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IAGpC,OADAN,QAAQC,IAAIK,GAER,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCJHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAJ0B,mBAE/BC,EAF+B,KAExBC,EAFwB,KAiBtC,OAVAC,qBAAU,WACPxB,EAAQC,GACNwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAGhB,CAACpB,IAEEqB,EDd2BK,CAAa1B,GAAlCa,EAFwB,EAE7BN,KAAca,EAFe,EAEfA,QACtB,OACI,qCACI,6BAAKpB,IACHoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACb,qBAAKA,UAAU,kDAAf,SAEYH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAA+BA,GAAZA,EAAIC,aEmBpCgB,MA7Bf,WAAwB,MAGgBzC,mBAAS,CAAC,SAH1B,mBAGb0C,EAHa,KAGD3C,EAHC,KAUpB,OACI,gCACI,kDACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MClBjC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.f5212e79.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( {setCategories} ) => {\n\n    const [inputValue, setInputValue] = useState('')\n    const handleInputChange = (e) =>{\n        console.log(e.target.value)\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setCategories( cats => [inputValue,...cats])\n        setInputValue('')\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories:PropTypes.func.isRequired\n}\n","export const getGifs = async( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=js1w79gFDcbjUwa5qOBmyTHXmcgfT279&q=${encodeURI(category)}&limit=10`\n    const resp = await fetch(url)\n    const { data } = await resp.json()\n\n    const gifs = data.map( img => {\n        return {\n            id:img.id,\n            title:img.title,\n            url:img.images?.downsized_medium.url\n        }\n    })\n\n    console.log(gifs);\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( { id,title,url} ) => {\n\n    console.log(url)\n    return (\n        <div className=\"card animate__animated animate__fadeInLeft\">\n            <img src={url} alt={title}></img>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const { data:images , loading } = useFetchGifs(category);\n    return (\n        <>\n            <h3>{category}</h3>\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n            <div className=\"card-grid animate__animated animate__fadeInLeft\">\n                    {\n                        images.map( img => (\n                            <GifGridItem  key={img.id} {...img} />\n                        ))\n                    }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\"\n\nexport const useFetchGifs = (category) => {\n    \n    const [state, setstate] = useState({\n        data:[],\n        loading:true\n    })\n\n    useEffect(() => {\n       getGifs(category)\n        .then(imgs => {\n            setstate({\n                data:imgs,\n                loading:false\n            })\n        })\n    } , [category]) \n\n    return state;\n}","import React, {useState} from 'react'\nimport {Â AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid';\n\nfunction GitExpertApp() {\n\n    //const categories = ['VEGETA','GOKU','PICOLO']\n    const [categories, setCategories] = useState(['Goku'])\n\n    //const handleAdd = () => {\n        /* setCategories([...categories, 'GOHAN']) */\n        //setCategories( cats => [...cats, 'GOHAN'])\n    //}\n\n    return (\n        <div>\n            <h2>Experto en GIF's</h2>\n            <AddCategory setCategories={  setCategories } />\n            <hr/>\n\n            <ol>\n                {\n                    categories.map( category => (\n                        <GifGrid \n                            key={category}\n                            category={category} />\n                    ))\n                }\n            </ol>\n        </div>\n    )\n}\n\nexport default GitExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GitExpertApp from './GitExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GitExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}